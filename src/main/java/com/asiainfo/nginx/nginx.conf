#运行nginx的用户/用户组
#user  nobody;
#user root root;

#nginx进程数，建议设置为等于CPU总核心数
worker_processes  1;

#一个worker进程打开的最大文件数目，与NGINX并发连接有关系
#worker_rlimit_nofile 102400;

#进程文件
#pid        logs/nginx.pid;

#错误日志文件的位置及输出级别，[ debug | info | notice | warn | error | crit ]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;


#nginx工作模式及连接数上限
events {
    #多路复用IO 基于LINUX2.6以上内核，可以大大提高NGINX的性能 uname -a查看内核版本号
    #use epoll;
    #单个worker process最大连接数,其中NGINX最大连接数＝连接数*进程数,一般1GB内存的机器上可以打开的最大数大约是10万左右
    worker_connections  1024;
}


#http协议配置
http {

    #引用mime.types, 当web服务器收到静态的资源文件请求时，依据请求文件的后缀名在服务器的MIME配置文件中找到对应的MIME Type，
    #根据MIME TYPE设置响应类型（Content-type）
    include       mime.types;
    #定义的数据流，有的时候默认类型可以指定为text,这跟网页发布还是资源下载有关系
    default_type  application/octet-stream;

	
    #日志格式
    #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；
    #$remote_user：	用来记录客户端用户名称；
    #$time_local： 	用来记录访问时间与时区；
    #$request： 	用来记录请求的url与http协议；
    #$status： 		用来记录请求状态；成功是200，
    #$body_bytes_sent ：用来记录发送给客户端文件主体内容大小；
    #$http_referer：	用来记录从那个页面链接访问过来的；
    #$http_user_agent：	用来记录客户浏览器的相关信息；
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    #访问日志，引用自定义的日志格式
    access_log  logs/access.log  main;

	
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件
    #对于普通应用，必须设为 on,
    #如果用来进行下载等磁盘IO重负载应用，可设置为 off
    sendfile        on;
	#防止网络阻塞
    tcp_nopush     on;
    #提高数据的实时响应性
    tcp_nodelay on;
    #连接超时时间
    #非常重要，根据实际情况设置值，超时时间，客户端到服务端的连接持续有效时间，60秒内可避免重新建立连接，
    #时间不能设太长，太长的话，若请求数10000##，都占用连接会把服务拖死
    keepalive_timeout  60;


    #nginx跟后端服务器连接超时时间（代理连接超时）
    #proxy_connect_timeout   5;
    #连接成功后，后端服务器响应时间(代理接收超时)
    #proxy_read_timeout      60;
    #后端服务器数据回传时间(代理发送超时)
    #proxy_send_timeout      5;
	

    #gzip设置，NGINX可以压缩静态资源
    gzip on;			#开启gzip压缩输出
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 4 16k; #压缩缓冲区
    gzip_http_version 1.1;	#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2; 		#压缩等级, 最小1,最大9. 值越大,压缩后越小
    #压缩类型，默认已经包含text/html，写上去也不会有问题，但是会有warn
    gzip_types text/plain application/x-javascript text/css application/xml;
    #作用是在http响应中增加一行，目的是改变反向代理服务器的缓存策略
    gzip_vary on;


    #nginx的upstream目前支持4种方式
    #轮询（默认）
    #weight：	权重值越大，负载就越大
    #ip_hash：	每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题
    #fair：		按后端服务器的响应时间来分配请求，响应时间短的优先分配
    #url_hash：	按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效
    
    #服务器状态
    #down(暂时不参与负载)、backup(其它所有的非backup机器down或者忙的时候，请求backup机器)
    #weight(值越大，负载就越大)、
    #max_fails(允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误)
    #fail_timeout(max_fails次失败后，暂停的时间)
	
    #负载均衡后台服务器列表
    upstream  backend  {
        #ip_hash;
        server 192.168.0.102:8080 max_fails=2 fail_timeout=30s ;
        server 192.168.0.102:8081 max_fails=2 fail_timeout=30s ;
    }
    
    #限制请求速度, 防止ddos，rate=30r/m  每分钟30次请求
    #limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;

    #虚拟主机配置
    server {
        
        #侦听端口
        listen       80;
        #域名，可以有多个，用空格隔开
        server_name  localhost;
        #默认网站根目录
		root      /usr/local/workspace/nginx

        #网页的默认编码格式
        charset utf-8;

        #虚拟主机的访问日志
        #access_log     logs/host.access.log    main;
        #error_log      logs/host.error.log     crit;
        
        #默认请求
        #location / {
        #    #根目录位置
        #    root   html;
        #    #首页索引文件的名称
        #    index  index.html index.htm;
        #}

        
        #防盗链
        #location ~ .*\.(jpg|jpeg|JPG|png|gif|icon)$ {
        #    #白名单，允许文件链出的域名白名单
        #    valid_referers none blocked localhost *.baidu.com *.google.com;
        #    if ($invalid_referer) {
        #        #盗链返回的图片
        #        rewrite ^/ http://www.it300.com/static/images/404.jpg;
        #        return 403;
        #    }
        #}
        

        # 对 / 做负载均衡+反向代理
        location / {
            
            proxy_pass        http://backend;
            proxy_redirect    off;

            #如果后端的服务器返回500、502、503、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移。
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP  $remote_addr;  
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

            # rewrite规则就是某个URL重写成特定的URL（类似于Redirect）
            # rewrite	<regex>	<replacement>	[flag]
            # break：            本条规则匹配完成后，终止匹配，不再匹配后面的规则 
            # redirect：      返回302临时重定向，浏览器地址会显示跳转后的URL地址 
            # permanent：    返回301永久重定向，浏览器地址栏会显示跳转后的URL地址 
            #rewrite     ^/$    http://localhost:8080/home.html  permanent;
        }

        #静态文件分离，由nginx自己处理，不去backend请求tomcat
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$
        {
            #静态资源存放目录
            root      images;
            #静态资源也可存放在远程服务器上
            #proxy_pass http://www.static.com;
            #10天之内只要访问过一次就从缓存读取
            expires 10d;
        }

        #nginx管理界面，需要在configure时加上--with-http_stub_status_module
        #allow/deny ip段：8=匹配后3个ip段，16=后2个ip段，24=最后一个ip段
        #location /nginx_status {
        #    stub_status on;
        #    access_log  off;
        #    allow 192.168.0.0/24;
        #    deny all;
        #}


        #错误提示页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
